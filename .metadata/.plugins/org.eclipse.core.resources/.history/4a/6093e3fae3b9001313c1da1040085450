package com.caribresort.factory;

import java.util.List;
import java.util.ArrayList;

import com.caribresort.actions.Request;
import com.caribresort.actions.RequestAction;
import com.caribresort.actions.Response;
import com.caribresort.database.ManagerDB;
import com.caribresort.entity.CaribResortEntity;
import com.caribresort.entity.Drink;
import com.caribresort.entity.viewmodels.ManagerReportVM;
import com.caribresort.logging.DefaultLogger;


public class ManagerFactory extends AbstractFactory {

	public ManagerFactory(Request request){
		this.request = request;
	}

	@Override
	public Response processRequest() {
		Response response = invalidResponse;
		switch(request.getAction()){
		case RequestAction.ADDDRINK:
			response= addDrink();
			break;
		case RequestAction.VIEWDRINKS:
			response= viewDrinks();
			break;
		case RequestAction.VIEWDRINKTYPES:
			response= viewDrinkTypes();
			break;	
		case RequestAction.REMOVEDRINK:
			response= removeDrink();
			break;
		case RequestAction.UPDATEDRINK:
			response= updateDrink();
			break;
		case RequestAction.GENERATEREPORT:
			response= generateReport();
			break;

			//Other CRUD Operations
		default:
			response =defaultCrud();
			break;

		}
		return response==null?AbstractFactory.invalidResponse:response;
	}

	private Response defaultCrud() {
		Response resp = invalidResponse;
		List<String> errors = new ArrayList<String>();
		try{
			
			if(request.getAction().startsWith("GET")){
				//start get
				
				//end get

			}else if(request.getAction().startsWith("UPDATE")){

				//start update
			}//end update
			else if(request.getAction().startsWith("DELETE")){
				//start delete
				List<String> errors = new ArrayList<String>();
                int id=0;
                try{
                	
                }catch(Exception e){
                	DefaultLogger.error("unable to delete entity", e);
                }
				
				/*String className=
						String.valueOf( request.getAction().charAt(3)) +request.getAction().substring(4).toLowerCase();
				CaribResortEntity obj = null;
				try {
					obj = (CaribResortEntity) Class.forName(className).cast(request.getObject());
				} catch (ClassNotFoundException e) {
					DefaultLogger.error("Unable to perform insert", e);
					errors.add("Unable to perform insert");
					throw e;
				}
				if(obj == null)
					throw new  Exception("Incorrect parameter");
				resp = new Response(ManagerDB.deleteEntity(  obj  ));*/
				
			} //end delete
			else if(request.getAction().startsWith("ADD")){
				//start insert
				String className=
						String.valueOf( request.getAction().charAt(3)) +request.getAction().substring(4).toLowerCase();
				CaribResortEntity obj = null;
				try {
					obj = (CaribResortEntity) Class.forName(className).cast(request.getObject());
				} catch (ClassNotFoundException e) {
					DefaultLogger.error("Unable to perform insert", e);
					errors.add("Unable to perform insert");
					throw e;
				}
				if(obj == null)
					throw new  Exception("Incorrect parameter");
				resp = new Response(ManagerDB.insert(  obj  ));
			}//end insert
			
			
		}catch(Exception e){
			resp = new Response(true,(String[])errors.toArray(),false);
		}
		return resp;
	}

	private Response generateReport() {
		List<String> errors = new ArrayList<String>();
		java.sql.Date dateStart = null;
		java.sql.Date dateEnd = null;
		try{
			dateStart = (java.sql.Date)(((Object[])request.getObject())[0]);
			dateEnd = (java.sql.Date)(((Object[])request.getObject())[1]);
		}catch(ClassCastException e){
			DefaultLogger.error("Unable to convert object to array of dates",e);
			errors.add("Unable to convert object to array of dates");
		}catch(IllegalArgumentException e){
			DefaultLogger.error("Incorrect amount of dates sent",e);
			errors.add("Incorrect amount of dates sent");
		}
		ManagerReportVM report = ManagerDB.getManagerReport(dateStart, dateEnd);
		if(report==null)
			errors.add("Unable to query frequency results from database");
		return report!=null?new Response(report):new Response(true,(String[])errors.toArray(),false);
	}

	private Response updateDrink() {
		Drink newDrink = null;
		try{
			newDrink = (Drink)request.getObject();
		}catch(ClassCastException e){
			return new Response(true,new String[]{"Invalid Drink Format"},false);
		}
		if(ManagerDB.update(newDrink))
			return new Response(true,new String[]{},true);
		else
			return new Response(true,new String[]{"Unable to update drink"},false);

	}

	private Response removeDrink() {
		int drinkId = 0;
		try{
			drinkId = (int)request.getObject();
		}catch(ClassCastException e){
			return new Response(true,new String[]{"Please specify the drink Id number"},false);
		}
		if(ManagerDB.deleteDrink(drinkId))
			return new Response(true,new String[]{},true);
		else
			return new Response(true,new String[]{"Unable to delete drink"},false);
	}



	private Response addDrink() {
		Drink newDrink = null;
		try{
			newDrink = (Drink)request.getObject();
		}catch(ClassCastException e){
			return new Response(true,new String[]{"Invalid Drink Format"},false);
		}
		if(ManagerDB.insert(newDrink))
			return new Response(true);
		else
			return new Response(true,new String[]{"Unable to add drink"},false);
	}

}
