package com.caribresort.database;


import java.io.Serializable;
import java.util.List;

import com.caribresort.logging.DefaultLogger;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;

@SuppressWarnings("deprecation") //TODO : Determine new method to get Hibernate Configure
public class BaseHibernate {

    private static final SessionFactory sessionFactory;
    
    static {
        try {
            // Create the SessionFactory from standard (hibernate.cfg.xml) 
        	Configuration configuration = new Configuration();
        	configuration=configuration.configure("hibernate.cfg.xml");
        			       //  .addAnnotatedClass(com.caribresort.entity.Armband.class);
            sessionFactory = configuration.buildSessionFactory();
            
        } catch (Throwable ex) {
            DefaultLogger.error("Initialization failed", ex);
           	throw new ExceptionInInitializerError(ex);
        }
    }
    
    public static Session getSession() {
        return sessionFactory.openSession();
    }
    
    /**
     * Insert hibernate object
     * */
    public static <T extends Serializable> Boolean insert(T object){
    	Session session = getSession();
    	Transaction trans = null; 
    	try{
    		trans = session.beginTransaction();
    		DefaultLogger.trace("Started Transaction to save "+ object.getClass().getName()  );
    		System.out.println("::::::"+object);
    		session.save(object);
    		trans.commit();
    		DefaultLogger.trace("Transaction to save "+object.getClass().getName()+" completed successfully");
    		return true;
    	}catch(RuntimeException re){
    		DefaultLogger.error("Error occured while saving "+object, re);
    		if(trans != null){
    			trans.rollback();
    		}
    	}catch(Exception e){
    		DefaultLogger.error("Error occured while saving "+object, e);
    		if(trans != null){
    			trans.rollback();
    		}
    	}finally{
    		session.flush();
    		session.close();
    	}
    	
    	return false;
    }
    
    public static <T extends Serializable> Boolean delete(T object){
    	Session session = getSession();
        Transaction trans = null;
        try {
            trans = session.beginTransaction();
            DefaultLogger.trace("Started Transaction to delete "+object.getClass().getName());
            
            session.delete(object);
            trans.commit();
            DefaultLogger.info("Delete transaction completed successfully");
            return true;
        } catch (RuntimeException ex) {
        	DefaultLogger.error("Exception occurred while deleting "+ object.getClass().getName(),ex);
            if (trans != null) {
                trans.rollback();
            }
            
        } catch(Exception e){
    		DefaultLogger.error("Error occured while deleting "+object, e);
    		if(trans != null){
    			trans.rollback();
    		}
    	}finally {
            session.flush();
            session.close();
        }
        return false;
    }
    
    public static <T extends Serializable> Boolean selectAll(Class clazz){
    	List<Object[]> results = null;
        Session session = getSession();
        Transaction trans = null;
        
        trans = session.beginTransaction();
        DefaultLogger.trace("Selecting all "+getClassName(clazz));
        results = session.createSQLQuery("select * from "+getClassName(clazz)).list();
        trans.commit();
        session.close();
    	return true;
    }
    
    private static String getClassName(Class clazz){
		return clazz.getName().substring(clazz.getName().lastIndexOf(".")+1);		
	}
}
